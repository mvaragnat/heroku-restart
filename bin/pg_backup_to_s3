# Set the script to fail fast if there
# is an error or a missing variable

set -eu
set -o pipefail

#!/bin/sh

# Download the latest backup from
# Heroku and gzip it

heroku pg:backups:download --output=/tmp/pg_backup.dump --app $HEROKU_APP_NAME

# gzip /tmp/pg_backup.dump

# Encrypt the gzipped backup file
# using GPG passphrase
# gpg --yes --batch --passphrase=$PG_BACKUP_PASSWORD -c /tmp/pg_backup.dump.gz

# Remove the plaintext backup file
# rm /tmp/pg_backup.dump.gz

# Generate backup filename based
# on the current date

# BACKUP_FILE_NAME="heroku-backup-$(date '+%Y-%m-%d_%H').gpg"
BACKUP_FILE_NAME="heroku-backup-$(date '+%Y-%m-%d_%H')"

# Upload the file to S3 using
# AWS CLI

# aws s3 cp /tmp/pg_backup.dump.gz.gpg "s3://${S3_BUCKET}/${BACKUP_FILE_NAME}"
aws s3 cp /tmp/pg_backup.dump "s3://${S3_BUCKET}/${BACKUP_FILE_NAME}"

# Remove the encrypted backup file

# rm /tmp/pg_backup.dump.gz.gpg
rm /tmp/pg_backup.dump